/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
  display: inline-block;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */

.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);

  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);

  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));

  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
  
  line-height: 30px;
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));

  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));

  /* Absolute distance from center, only positive */
  --distance: calc(
     (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );

  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));

  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}


.main-navigation .main-nav ul li a .char, .main-navigation .main-nav ul li a .char:before, .main-navigation .main-nav ul li a .char:after {
	 transition: color 0.2s linear;
	 animation-duration: 0.6s, 0.4s;
	 animation-iteration-count: infinite;
	 animation-timing-function: steps(1);
	 animation-delay: calc(-0.1s * var(--char-index));
}
 .main-navigation .main-nav ul li a .char:before, .main-navigation .main-nav ul li a .char:after {
	 visibility: visible;
	 opacity: 0;
	 transition-property: all;
	 animation-name: glitch-anim, glitch-bounce;
	 animation-play-state: paused;
}
 .main-navigation .main-nav ul li a .char:before {
	 color: #fe422e;
	 animation-delay: calc(-0.02s * var(--char-index));
}
 .main-navigation .main-nav ul li a .char:after {
	 color: #fd7b55;
	 animation-delay: calc(-.5s * var(--char-index));
}
 .main-navigation .main-nav ul li a:hover .char {
	 color: #ffffff;
	 animation-name: glitch-bounce;
}
 .main-navigation .main-nav ul li a:hover .char:before, .main-navigation .main-nav ul li a:hover .char:after {
	 opacity: 1;
	 animation-play-state: running;
}
 @keyframes glitch-bounce {
	 20% {
		 transform: translate(-1%, 0%);
	}
	 40% {
		 transform: translate(14%, -2%);
	}
	 50% {
		 transform: translate(-5%, 5%);
	}
	 65% {
		 transform: translate(1%, -2%);
	}
	 80% {
		 transform: translate(-3%, 2%);
	}
}
 @keyframes glitch-anim {
	 0% {
		 clip-path: polygon(0 70%, 100% 70%, 100% 75%, 0 75%);
	}
	 20% {
		 clip-path: polygon(0 10%, 100% 10%, 100% 20%, 0 20%);
	}
	 40% {
		 clip-path: polygon(0 33%, 100% 33%, 100% 33%, 0 33%);
	}
	 60% {
		 clip-path: polygon(0 50%, 100% 50%, 100% 20%, 0 20%);
	}
	 80% {
		 clip-path: polygon(0 80%, 100% 80%, 100% 80%, 0 80%);
	}
	 100% {
		 clip-path: polygon(0 70%, 100% 70%, 100% 80%, 0 80%);
	}
}